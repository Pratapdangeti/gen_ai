
Dataset: customers
- Columns:
    -customer_id(type:character,sample values:['80fb240e-2633-4f4f-972c-735333b7652d', 'e910db90-41b6-4095-9346-0c92774415d5', '1f302e48-eefc-49ac-bc4c-4d97ad11df73']),
    -full_name(type:character,sample values:['John Matthews', 'Valerie Brown', 'Kevin Smith']),
    -age(type:float,sample values:[71.0, 58.0, 42.0]),
    -gender(type:character,sample values:['Non-binary', 'Prefer not to say', 'Male']),
    -email(type:character,sample values:['rrodriguez@hotmail.com', 'erios@yahoo.com', 'jared_parker@hotmail.com']),
    -phone(type:character,sample values:['(842)524-8980x147', '+1-494-638-4970', '882.443.8214']),
    -street_address(type:character,sample values:['55428 Graham Pike Suite 387', '652 Melanie Viaduct', '7103 Austin Village']),
    -city(type:character,sample values:['Cincinnati', 'Albany', 'Sacramento']),
    -state(type:character,sample values:['Arizona', 'Massachusetts', 'Texas']),
    -zip_code(type:float,sample values:[85194.0, 92355.0, 67730.0]),
    -registration_date(type:character,sample values:['2020-07-12', '2021-01-20', '2022-05-21']),
    -preferred_channel(type:character,sample values:['online', 'in-store', 'both']),

Dataset: campaigns
- Columns:
    -campaign_id(type:character,sample values:['8b5d0307-5d82-444b-a427-925be4fcfcc3', '786abd6d-e85c-48da-9707-7137892d3997', '235d978a-91d1-40b4-be70-785d49a1878a']),
    -campaign_name(type:character,sample values:['Weekend Blowout 2020', 'Holiday Event 2023', 'Limited Time Collection 2022']),
    -campaign_type(type:character,sample values:['Influencer Marketing', 'Email Marketing', 'Social Media']),
    -start_date(type:character,sample values:['2024-04-13', '2020-06-01', '2024-12-16']),
    -end_date(type:character,sample values:['2023-07-06', '2024-11-07', '2022-08-26']),
    -target_segment(type:character,sample values:['Technology Enthusiasts', 'Seniors (60+)', 'West Coast']),
    -budget(type:float,sample values:[22308.87, 13080.46, 79211.67]),
    -impressions(type:float,sample values:[2926153.0, 1938590.0, 850806.0]),
    -clicks(type:float,sample values:[3008.0, 5147.0, 4175.0]),
    -conversions(type:float,sample values:[433.0, 35.0, 649.0]),
    -conversion_rate(type:float,sample values:[4.82, 6.19, 4.22]),
    -roi(type:float,sample values:[93.9, 2002.81, 14649.02]),

Dataset: customer_reviews_complete
- Columns:
    -review_id(type:character,sample values:['rev_000415', 'rev_000926', 'rev_000400']),
    -customer_id(type:character,sample values:['93abf46f-6d3e-4335-a213-8377f923dfc6', '89ba500a-5071-4437-8edc-e0b3e3fa2ae6', '87d04e00-e831-4ccc-bd36-df7564979e7a']),
    -product_name(type:character,sample values:['Bed Frame', 'Amazon Echo', 'Area Rug']),
    -product_category(type:character,sample values:['Computer Accessories', 'Bedding', 'Laptops']),
    -full_name(type:character,sample values:['Cheryl Gaines', 'Kristin Phillips', 'Stephanie Nguyen']),
    -transaction_date(type:character,sample values:['2021-11-23', '2023-09-23', '2023-07-01']),
    -review_date(type:character,sample values:['2024-01-27', '2021-11-04', '2024-02-15']),
    -rating(type:integer,sample values:[1, 3, 4]),
    -review_title(type:character,sample values:['Impressive Versatility - Almost Perfect!', 'Perfect addition to my home decor!', 'Almost Perfect, But Could Be Better']),
    -review_text(type:character,sample values:["The iPhone 13 is certainly a step up from my previous model, with its improved camera quality and faster processing speed making everyday tasks much smoother. However, I'm a bit disappointed by the lack of some features I had hoped for, like more advanced customization options for the home screen and the absence of a native video editing tool within the Photos app. Despite these shortcomings, it's still a decent upgrade for my needs, but I do hope Apple addresses these issues in future versions.", "I recently purchased the XYZ Electric Range and overall, it's a good appliance. The cooktop heats evenly, which is crucial for my baking needs, and the self-cleaning feature is quite convenient. However, I've noticed that the timer often stops prematurely, and I find myself having to reset it more than I should. Also, the knob for adjusting the temperature could be more responsive, as I sometimes struggle to get the exact heat I need for delicate dishes. Despite these minor issues, I think this range has potential, and with some tweaks, it could be an excellent addition to any kitchen.", "I recently purchased the Wall Art from your store and I must say it's a beautiful piece that adds an elegant touch to my living room. The colors are vibrant and the design is tastefully modern. However, the assembly process was somewhat challenging. The instructions could have been clearer, especially for some of the more intricate parts. I ended up having to watch a YouTube tutorial to fully understand how it all fits together. Nonetheless, once assembled, it has become the focal point of my living room and well worth the effort!"]),

Dataset: interactions
- Columns:
    -interaction_id(type:character,sample values:['eca5b690-4559-4bd4-a3f8-26bd047d730f', 'a0ca9c00-2e89-40e5-a471-847ed330f81a', '92fe2a78-ee72-4e35-a752-5c6fd64e838c']),
    -customer_id(type:character,sample values:['1bbf4135-9191-4c69-8a08-42a5003e9297', 'd757b199-3720-4ed3-83a5-b6cb7bc2d6dc', '36cf262d-feda-4df0-9f17-86f7f037322c']),
    -channel(type:character,sample values:['mobile app', 'in-store kiosk']),
    -interaction_type(type:character,sample values:['inventory_check', 'page_view', 'wishlist_add']),
    -interaction_date(type:character,sample values:['2024-09-24 15:53:00', '2022-07-21 11:32:00', '2024-05-11 08:07:00']),
    -duration(type:float,sample values:[18.0, 25.0, 20.0]),
    -page_or_product(type:character,sample values:['Bose Headphones', 'category_audio', 'account']),
    -session_id(type:character,sample values:['96609fb2-1f78-494e-b63d-0facac62157e_session_19', '7f505810-0867-46f2-a9f3-666357dc1d5d_session_0', '27cb1eeb-f36d-461f-bb9b-9bdf90612ce6_session_3']),

Dataset: support_tickets
- Columns:
    -ticket_id(type:character,sample values:['4b2f685e-b3ce-4012-9d9a-3b8005581234', 'e07b50ff-8c2d-44b9-96ca-cf01d4acbfd1', '573bbe63-9b96-4d62-be29-909be917dab1']),
    -customer_id(type:character,sample values:['1981cb6d-bcf5-4226-a53f-4ed5a591af63', 'abda27bb-772c-4ed5-ba4e-a9bb0c376fc6', '62477cab-c9db-4095-afba-d947f8c6f693']),
    -issue_category(type:character,sample values:['Billing', 'Technical']),
    -priority(type:character,sample values:['Low', 'Medium']),
    -submission_date(type:character,sample values:['2023-04-05 00:00:00', '2021-03-17 00:00:00', '2021-10-31 00:00:00']),
    -resolution_date(type:character,sample values:['2022-09-14 23:00:00', '2024-06-20 03:00:00', '2024-10-24 08:00:00']),
    -resolution_status(type:character,sample values:['Closed without Resolution', 'Pending', 'Escalated']),
    -resolution_time_hours(type:float,sample values:[108.0, 86.0, 84.0]),
    -customer_satisfaction_score(type:float,sample values:[3.0, 1.0]),
    -notes(type:character,sample values:['Customer requesting recommendations for products similar to Refrigerator.', 'Customer requesting address change for shipment of Area Rug.', 'Customer was charged twice for the same Samsung Galaxy.']),

Dataset: transactions
- Columns:
    -transaction_id(type:character,sample values:['6f177c5e-8417-4483-b8a0-2ada812835cd', '24234529-5187-4ccd-ab21-c23c47630a97', 'a5280397-501f-4aaa-b553-73a0877aa51f']),
    -customer_id(type:character,sample values:['6721f3d1-0177-4d61-81db-1c1b8944869f', '7383a712-220e-4044-900a-eae98a5c7a0f', 'a7b3afb9-c0b8-47a1-8e8f-76430bb4e87c']),
    -product_name(type:character,sample values:['Google Pixel 6', 'Food Processor', 'Wall Art']),
    -product_category(type:character,sample values:['Smartphones', 'Home Decor', 'Tablets']),
    -quantity(type:float,sample values:[25.0, 47.0, 13.0]),
    -price(type:float,sample values:[1871.03, 366.76, 50.78]),
    -transaction_date(type:character,sample values:['2021-08-26', '2022-06-19', '2020-08-24']),
    -store_location(type:character,sample values:['New York, NY', 'Chicago, IL']),
    -payment_method(type:character,sample values:['Gift Card', 'Cash']),
    -discount_applied(type:float,sample values:[10.0, 0.0]),


Text to SQL Examples:

Example 1:
 - text:{# What are the top 10 most profitable marketing campaigns ? } -> 
 SQL{SELECT campaign_name, roi
FROM campaigns
ORDER BY roi DESC
LIMIT 10; };

Example 2:
 - text:{# What is the average customer age by preferred channel ?} -> 
 SQL {SELECT preferred_channel, AVG(age) AS avg_age
FROM customers
GROUP BY preferred_channel; };

Example 3:
 - text:{# List the customers with support tickets opened but no resolution ?} ->  
 SQL {SELECT c.full_name, s.ticket_id, s.issue_category, s.submission_date
FROM support_tickets s
JOIN customers c ON s.customer_id = c.customer_id
WHERE s.resolution_status != 'Closed without Resolution'; };

Example 4:
 - text:{#Identify top 10 customers with highest total spend ?} ->
 SQL {SELECT c.full_name, SUM(t.price * t.quantity - t.discount_applied) AS total_spent
FROM transactions t
JOIN customers c ON t.customer_id = c.customer_id
GROUP BY c.customer_id, c.full_name
ORDER BY total_spent DESC
LIMIT 10;};

Example 5:
 - text:{#Find highly rated products with highest average rating and good sales volume.?} ->
 SQL {SELECT cr.product_name, AVG(cr.rating) AS avg_rating, COUNT(DISTINCT t.transaction_id) AS sales_count
FROM customer_reviews_complete cr
LEFT JOIN transactions t ON cr.product_name = t.product_name
GROUP BY cr.product_name
ORDER BY avg_rating DESC, sales_count DESC;};

Example 6:
 - text:{# Customers who have reviewed but never purchased the reviewed product ?} ->
 SQL {SELECT DISTINCT cr.customer_id, c.full_name, cr.product_name
FROM customer_reviews_complete cr
JOIN customers c ON cr.customer_id = c.customer_id
LEFT JOIN transactions t ON cr.customer_id = t.customer_id AND cr.product_name = t.product_name
WHERE t.transaction_id IS NULL;};

Example 7:
 - text:{# What is the Total interactions duration per customer by channel ?} ->
 SQL {SELECT c.full_name, i.channel, SUM(i.duration) AS total_duration
FROM interactions i
JOIN customers c ON i.customer_id = c.customer_id
GROUP BY c.customer_id, i.channel
ORDER BY total_duration DESC;};

Example 8:
 - text:{# Highlight campaigns outperforming the average conversion rate ?} ->
 SQL {SELECT campaign_name, conversion_rate
FROM campaigns
WHERE conversion_rate > (SELECT AVG(conversion_rate) FROM campaigns);};

Example 9:
 - text:{# Find which product categories have the most customer feedback ?} ->
 SQL {SELECT product_category, COUNT(*) AS review_count
FROM customer_reviews_complete
GROUP BY product_category
ORDER BY review_count DESC;};

Example 10:
 - text:{# Customers with multiple support tickets unresolved for more than 7 days ?} ->
 SQL {SELECT c.full_name, COUNT(s.ticket_id) AS unresolved_tickets
FROM support_tickets s
JOIN customers c ON s.customer_id = c.customer_id
WHERE s.resolution_status != 'Closed without Resolution' 
  AND TIMESTAMPDIFF(DAY, s.submission_date, CURRENT_DATE) > 7
GROUP BY c.customer_id, c.full_name
HAVING unresolved_tickets > 1;};

Example 11:
 - text:{# See which customers have both purchased and reviewed products, enabling targeted follow-up or loyalty programs ?} ->
 SQL {SELECT
    c.full_name,
    c.email,
    t.product_name,
    t.transaction_date,
    cr.review_title,
    cr.rating,
    cr.review_date
FROM transactions t
JOIN customers c ON t.customer_id = c.customer_id
LEFT JOIN customer_reviews_complete cr ON t.customer_id = cr.customer_id AND t.product_name = cr.product_name
ORDER BY c.full_name, t.transaction_date DESC;};

Example 12:
 - text:{# Evaluate campaign effectiveness in driving transactions by customer segment ?} ->
 SQL {SELECT
    c.state,
    ca.campaign_name,
    ca.target_segment,
    ca.conversion_rate,
    COUNT(t.transaction_id) AS transactions_during_campaign
FROM customers c
JOIN transactions t ON c.customer_id = t.customer_id
JOIN campaigns ca ON ca.target_segment = c.state
WHERE t.transaction_date BETWEEN ca.start_date AND ca.end_date
GROUP BY c.state, ca.campaign_name, ca.target_segment, ca.conversion_rate
ORDER BY transactions_during_campaign DESC;};

Example 13:
 - text:{# Compare stated channel preferences with where customers actually interact, for better resource allocation. ?} ->
 SQL {SELECT
    c.full_name,
    c.preferred_channel,
    i.channel,
    COUNT(i.interaction_id) AS num_interactions
FROM customers c
JOIN interactions i ON c.customer_id = i.customer_id
GROUP BY c.full_name, c.preferred_channel, i.channel
ORDER BY num_interactions DESC;};

Example 14:
 - text:{# Identify best-rated products and their sales performance for inventory and promotion decisions. ?} ->
 SQL {SELECT
    cr.product_name,
    AVG(cr.rating) AS avg_rating,
    COUNT(cr.review_id) AS review_count,
    SUM(t.quantity) AS total_sold
FROM customer_reviews_complete cr
JOIN transactions t ON cr.product_name = t.product_name
GROUP BY cr.product_name
ORDER BY avg_rating DESC, total_sold DESC;};

Example 15:
 - text:{# Spot high-value customers with frequent support needs for targeted retention strategies  ?} ->
 SQL {SELECT
    c.full_name,
    SUM(t.price * t.quantity - t.discount_applied) AS lifetime_value,
    COUNT(s.ticket_id) AS support_tickets_count,
    AVG(s.customer_satisfaction_score) AS avg_support_score
FROM customers c
LEFT JOIN transactions t ON c.customer_id = t.customer_id
LEFT JOIN support_tickets s ON c.customer_id = s.customer_id
GROUP BY c.full_name
ORDER BY lifetime_value DESC;};

Example 16:
 - text:{# Recent Customer Interactions Leading to Purchases ?} ->
 SQL {SELECT
    c.full_name,
    i.interaction_type,
    i.page_or_product,
    i.interaction_date,
    t.product_name,
    t.transaction_date
FROM interactions i
JOIN transactions t ON i.customer_id = t.customer_id AND i.page_or_product = t.product_name
JOIN customers c ON i.customer_id = c.customer_id
WHERE t.transaction_date >= i.interaction_date
ORDER BY i.interaction_date DESC;};

Example 17:
 - text:{# Identify which support categories need improvement based on time and satisfaction. ?} ->
 SQL {SELECT
    s.issue_category,
    AVG(s.resolution_time_hours) AS avg_resolution_hours,
    AVG(s.customer_satisfaction_score) AS avg_satisfaction
FROM support_tickets s
GROUP BY s.issue_category
ORDER BY avg_satisfaction DESC;};

Example 18:
 - text:{# Spot top-selling categories and their review scores for product development and marketing ?} ->
 SQL {SELECT
    t.product_category,
    COUNT(t.transaction_id) AS total_transactions,
    AVG(cr.rating) AS avg_review_rating,
    COUNT(cr.review_id) AS total_reviews
FROM transactions t
LEFT JOIN customer_reviews_complete cr ON t.product_name = cr.product_name
GROUP BY t.product_category
ORDER BY total_transactions DESC;};

Example 19:
 - text:{# See if certain interaction channels lead to specific support issues, for operational improvements. ?} ->
 SQL {SELECT
    c.full_name,
    i.channel,
    i.interaction_type,
    s.issue_category,
    s.priority,
    s.resolution_status
FROM customers c
JOIN interactions i ON c.customer_id = i.customer_id
JOIN support_tickets s ON c.customer_id = s.customer_id
ORDER BY c.full_name, i.interaction_date DESC, s.submission_date DESC;};


